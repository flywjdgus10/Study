java.sun.com


jvm을 사용하는 이유 = 어떠한 운영체제에서도 실행시키기 위함.
그러나 운영체제에 맞는 jvm을 이용해야한다.
자바가 느린것은 이 때문이지만, 요즘은 그렇지도 않고 속도가 느려지면 보통 db를 의심한다

소스코드 -> jvm -> class,바이트코드


부호결정비트를 MostSignificantBit 라고한다.


실수는 오차가 존재할 수 밖에 없다.


기본적으로 int,double
다른 자료형이라도 연산할 때 위 자료형으로 자동 형변환된다.


실수의 % 연산은 의미가 없다.


곱셈과 나눗셈은 cpu에 부담이지만 비트연산은 크게 부담이 없다.


outerLoop를 통한 이중반복문 break 도 있다.

스코프 = 영역

재귀는 성능저하를 유발할 수 있다.


final -> 상수화 시킴.변경불가,all 대문자

참조변수(레퍼런스변수)
참조변수는 주소값을 지닌다.(포인터변수와 비슷)



배치파일을 만들어서 실행할 때, classpath를 1회용으로 수정해서 사용할 수 있다.!!!
다양하게 활용가능




shell로 실행하려면, 패키지 순서대로 디렉토리를 다 만들어야 하는데
javac -d ~!~.java 하면 그대로 디렉토리가 만들어진다.



get/set -> Access 메소드

하나의 java파일엔 하나의 public만 존재할 수 있다.



캡슐화에 대해 구글링해보자



다른 언어 = 컴파일 후 실행파일
자바 언어 = 컴파일 후 class파일, 실행파일 아직 생성x(자바는 필요한 만큼만 메모리에 올리기 때문, 실행파일 = 메모리 사용,onDemend)
static -> 모든 인스턴스가 공유
static은 jvm에 의해 클래스가 메모리공간에 올라가는 순간에 초기화된다.
static + final이 활용 많이 될듯
static method도 변수와 마찬가지(static 이외의 것에 접근 불가)



자바는 import java.long.*; 가 기본으로 삽입된다.



main은 어느 클래스에 있어도 괜찮다.
main은 jvm에 의해 호출되므로 static이다.


String은 클래스이다.
= "123"; 또는 new String()은 같은 이야기이다. 하지만 이 인스턴스는 상수형태의 인스턴스이다...!!!
따라서
String a = "123";
String b = "123";  두 레퍼런스변수는 같은 인스턴스를 가리킨다.(매번 인스턴스 생성은 부담)
상수이기 때문에 String.concat()을 하면 매개변수 문자열을 합친 새로운 String을 반환한다.
문자열을 완전히 복사하고 싶으면 String a = new String(b);로 해야 한다.
"ab" + "cd"는 "ab".concat("cd");로 자바 컴파일러에 의해 변환되어 연산된다.
"ab" + 1 도 마찬가지. 먼저 1이 String으로 변환된다.

String에 변경할 수 있는 기능을 얹은 것이 StringBuilder , StringBuffer이다.
그러나 엄밀히 문자열이라고 부르진 않는다. 이 둘은 메모리의 크기가 유동적으로 변경된다.



scanner는 입력 뿐 아니라 다방면의 데이터를 추출하기 위해 설계된 클래스
스페이스바,탭,엔터 모두 데이터를 구분하는 기준이 된다.




배열도 인스턴스이다.
참조변수들의 배열!!


들쑥날쑥 2차원 배열 = ragged array

for each는 참조가 필요할 때 쓰면 좋다



상속은 꼭 재활용 뿐 아니라, 
연관된 일련의 클래스에 대한 공통적인 규약도 정의할 수 있다.


상속받았다고 해도, super를 통해 부모클래스 멤버는 해당 생성자로 초기화하는게 좋다.
왜냐하면 초기화 규약들이 거기에 있을 것이기 때문


private 
default
protected
public 순서


자바에서의 재활용은, 클래스단위의 재활용이 아니고
패키지 단위의 재활용(Component Based Development)를 의미한다.


private 멤버가 있는 클래스를 상속한 클래스는
protected 메소드로 안정성과 사용성을 취할 수 있다.


c++과 달리 자바는 단일상속만 허용


is-a관계는 상속
has-a관계는 멤버소유가 적절

오버라이딩 -> 재정의
오버로딩 -> 비슷한것 새로 정의

a
b
c순으로 상속할 때,
a = new c(); //실행
b = a; //에러
c = a; //에러   
b,c에 각각 a의 함수를 오버라이딩 했다면, 무조건 최하위의 함수가 호출된다.
오버라이딩이 이뤄지면 상위클래스의 메소드는 어떠한 참조변수로도 호출이 불가능하도록 철저히 가려진다.

-상위클래스의 참조변수는 하위클래스의 인스턴스를 참조할 수 있다.
-오버라이딩된 상위 클래스의 메소드는 오버라이딩을 한 하위 클래스의 메소드에 의해 가려진다.
외부에서 상위클래스의 메소드에 접근 불가



변수가 오버라이딩되면, 참조변수의 자료형에 따라 접근하는 변수가 달라진다.
해당 자료형에 맞는 변수가 출력된다.



인스턴스 자료형에 따라 호출할 메소드를 달리하고싶다면? instanceof! 상속 관계를 바탕으로 형변환이 가능한지 연산


클래스의 인스턴스를 하나도 생성하지 않고,
단지 상위 클래스의 역할만 하도록 할 수도 있다. 생성자를 private으로 두면 좋을 것 같네

Control class = Manager Class = 전체 흐름 컨트롤


클래스가 데이터도 표현하면서, 흐름도 컨트롤하면 안된다.
독립적으로 기능을 나눠야 한다.

자바의 모든 인스턴스에 공통된 기준을 적용하기 위해 모든 객체는 object 객체를 상속한다
가급적 toString을 오버라이딩 해서 인스턴스를 적절하게 출력시키는 것이 좋다.

final 키워드는 클래스,메소드,프로퍼티 전부 다 적용 가능하다.



생성하면 안 되는, 상속의 관계를 형성하기 위한 클래스 -> 추상클래스로 구현하면 된다.
오버라이딩을 목적으로 하는, 속이 빈 메소드도 존재. abstract 클래스.
추상메소드가 정의된 클래스는 인스턴스로 활용 불가. 클래스,메소드 모두 abstract붙여준다.
단지 인스턴스 생성만 방지하기 위해 abstract써도 됨
abstract메소드는 반드시 오버라이딩 되어야 한다.
abstract는 보통 public으로 별도로 클래스 파일화 하는게 좋다.
추상클래스 상속



인터페이스 = 이 인터페이스에 맞춰 클래스를 설계해주세요
어떻게 만들었는지 상관없이, 저 설계대로라면 제 코드를 실행시킬수 있어요
인터페이스 내의 변수는 무조건 public static final 직접 써도 된다.  (public interface week{ int mon = 1,...etc}) 가능, enum으로도 사용 가능
인터페이스 내의 메소드는 무조건 public abstract 직접 써도 된다.쓰는게 좋을 듯
인터페이스는 일반적으로 public, 인터페이스간 '상속' 가능
인터페이스 다중상속 가능.
클래스의 다중상속은 득보다 실이 많을 수 있다.
그리고 다중상속이 무조건 필요한 경우는 없다.
인터페이스 구현


추상클래스가 전부 추상메소드로 이루어져 있다면, 인터페이스로도 대체할 수 있다.
오버라이딩할때 좁히는 범위로는 불가. public -> private
모든 object에 기본 toString이 있으므로, 적절하게 오버라이딩 하자!



inner class = nested class
별 다를거 없다. 캡슐화, 가독성, 유지보수성 위해 사용된다.
inner class가 static으로 선언되어 있다면, outer의 인스턴스 생성 없이도 바로 인스턴스 생성 가능
inner class는 outer의 변수,메소드에 접근 가능



Local class는 인터페이스와 묶어서 활용
멤버 메소드에서 새로운 클래스 정의 후, 그 클래스 반환하고 싶을 때, 인터페이스에 담아서 보낸다.
멤버변수, 매개변수와 지역변수에 접근 가능한데, 멤버변수가 아니면 반드시 final로 선언된 변수들이어야 한다.
멤버변수가 아닌 변수들은 소멸된다는 특징때문




Anonymous class
익명 메소드와 비슷한 느낌
Readable = 인터페이스
Readable read = new Readable(){
	public void read(){}
};



if는 예외 말고 많은 경우에서 사용하기 때문에, 한눈에 보기 어렵다.
따라서 예외처리를 따로 해주는 것이 좋다.


try catch는 jvm에서 처리를 담당한다.



모든 예외 클래스들은 Throwable 클래스를 상속한다.
배열에 잘못된 접근 -> ArrayIndexOutOfBoundsException
허용할수 없는 형변환 -> ClassCastException
배열의 크기 음수 -> NegativeArraySizeException
null 호출 -. NullPointerException
중간에 return을 하더라도 finally영역은 실행되고 나서 메소드를 빠져나간다.


사용자 정의 예외도 있다.
생성자 말고도 다양한 에러 출력 메소드 정의 가능
throws 구글링!throw 받아서 또 throws 넘겨버릴수도 있다. 책임전가
static main에서까지 throws 해버리면 jvm이 에러를 처리한다.printStackTrace함수와 비슷하게 처리
Throwable 클래스는 Exception과 Error를 자식으로 두는데, Error는 심각한 오류를 커버한다.보통 jvm자체에 문제를 커버.
개발자는 Exception을 처리하면 된다.
시간나면 api 사이트가서 놀자. 앞으로는 api에서 클래스 , 메소드 가져다 쓸 때, 에러를 처리해야 하는지 확인하자.



jvm은 os가 할당해주는 메모리 공간을 토대로 자기자신을 실행한다. 그리고 응용프로그램도 실행시킨다.
메모리공간은 크게 메소드,스택,힙 으로 나누어져 있다.
메소드 - 바이트코드, static
스택 - 지역변수,매개변수
힙 - 인스턴스

바이트코드와 static이 메소드 영역에 저장되는 시점이 바로 클래스가 메모리에 올려지는 시점
스택은 즉각즉각 소멸
힙과 스택을 나누는 이유, 인스턴스의 소멸방법과 소멸 시점이 지역변수와는 다르기 때문.
String str = new String("!23");//str은 스택에, 인스턴스는 힙에 각각 저장
jvm이 힙내 인스턴스의 소멸 시기를 판단한다. 어떤 형태로도 참조될 수 없는 인스턴스가 소멸된다. 이 과정이 바로 gc
사용자가 소멸에 관여하고 싶다면 finalize() 사용, jvm도 이 메소드 사용. Object에 선언되어있다.
(반드시 super.finalize() 안에 써 넣을것!!!!!!!, 원래의 메소드는 실행되지 않기 때문)
System.gc(), System.runFinalization()연속 호출을 통해 실행
gc는 프로그램성능에 문제를 줄 수 있어, 특정 알고리즘을 통해 계산된 시간에 수행된다.




==는 참조변수의 참조 값 비교.(주소끼리 비교)
따라서 참조변수에 걸려있는 '인스턴스'를 비교하고 싶으면 인스턴스.eqaul(); 사용



object에는 clone 메소드가 정의되어 있다.
인스턴스의 복사본이 생기고, 복사본의 참조값이 반환된다.
Cloneable 인터페이스를 구현해야 한다. 안하면 예외 발생 CloneNotSupportedException
Cloneable은 텅 빈 인터페이스이다. 특별한 표시 위한 인터페이스
복사해도 되는 클래스, 아닌 클래스를 구분짓기 위함.
구현하려면, public Object clone() throws CloneNotSupportedException{
	return super.clone();//protected로 선언되어 있기 때문
}을 오버라이딩 해야 한다. 



인스턴스가 다른 인스턴스를 품고 있을 경우, 깊은복사를 해야한다!!
겉?턴스는 복사가 되어도 내스턴스는 안된다 ㅠ 그러나 String은 어차피 변경 불가하므로 깊복 안해도 된다.
(변경 때문에 깊복이 필요한가보네)




wrapper 클래스 = 감싸는 클래스 Integer, IntWrapper(사용자정의) 등.
기본 자료형 데이터들도 인스턴스로 표현을 해야만 하는 경우가 있다.
모든 기본 자료형에 각각 Wrapper 클래스가 있다.
그리고 char를 제외한 각 래퍼클래스는 문자열에 대해 오버로딩 되어있다. 
Integer num1 = new Integer("240");
기본 자료형과 래퍼클래스는 boxing unboxing이 되어있다.(래퍼클래스는 산술을 위해 생긴 클래스가 아님,변경불가)
Integer iValue = 1;//auto boxing, 레퍼런스 변수에 값 저장하려함;;, iValue++도 auto boxing
int num = iValue; // auto unboxing, iValue.intValue() 자동 호출
산술불가지만 auto b,ub으로 산술 기능 보완



int와 short같은 정수 자료형의 문제점은 매우 큰 수의 표현이 불가능하다는 것
float과 double같은 실수 자료형의 문제점은 정밀한 값의 표현이 불가능.
해결=>BigInteger, BigDecimal
BigInteger e = new BigInteger("1000000000000000000"); 
BigInteger f = new BigInteger("1000000000000000000");
//문자열 통해서 입력,왜냐하면 기존 자료형으로 커버불가, BigDecimal은 기존 자료형으로 커버 가능.
//BigDecimal 자주 사용
BigInteger n = e.add(f);




Math 클래스는 생성목적x static
Math.PI, Math.log(25), Math.toDegree(2.0*Math.PI), Math.toRadians
Random rand = new Random();
rand.setSeed(System.currentTimeMillis());
rand.nextInt();





문자열 데이터의 분석이 필요할 때 => StringTokenizer 사용. 
구분자(delimiter)로 문자열 분해 가능 -> 결과 문자열을 토큰 이라고 부른다
사용법은 iterator와 비슷
StringTokenizer st = new StringTokenizer(strData, ":"); 
		//구분자 생략시, 스페이스바 기준. 마지막에 true 매개변수 추가하면, 구분자도 출력
		while(st.hasMoreTokens())
			System.out.println(st.nextToken());
			

			
			
제네릭부터 시작